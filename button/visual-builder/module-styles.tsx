import React, { type ReactElement } from 'react';
import { isEmpty, merge } from 'lodash';

import {
  buttonIconSelectorFunction,
  CssStyle,
  type SelectorFunctionParams,
  StyleContainer,
  type StylesProps,
} from '@divi/module';
import { type ButtonAttrs } from '@divi/types';

import {
  buttonAlignmentDeclaration,
  buttonIconStyleDeclaration,
  buttonSpacingDeclaration,
} from './style-declarations';

/**
 * Button Module's style components.
 *
 * @since ??
 */
const ModuleStyles = <TProps extends StylesProps<ButtonAttrs>>({
  attrs,
  elements,
  settings,
  wrapperOrderClass,
  baseOrderClass,
  orderClass,
  mode,
  state,
  noStyleTag,
  isCustomPostType = false,
  styleGroup,
}: TProps): ReactElement => {
  let moduleElementAttrs = attrs?.module?.decoration ?? {};
  let buttonElementAttrs = attrs?.button?.decoration ?? {};
  if ('presetGroup' === styleGroup) {
    moduleElementAttrs = merge({}, {
      spacing:   attrs?.button?.decoration?.spacing ?? {},
      boxShadow: attrs?.button?.decoration?.boxShadow ?? {},
    }, moduleElementAttrs);

    buttonElementAttrs = {
      ...buttonElementAttrs,
      spacing:   {},
      boxShadow: {},
    };
  }

  // If button element has box shadow, we need to remove it from button element.
  // Button module does not support box shadow on button element.
  // This is to prevent the box shadow from being applied to the button element from OG
  // preset that is create at other module.
  if ('module' === styleGroup) {
    if (! isEmpty(buttonElementAttrs?.boxShadow)) {
      buttonElementAttrs.boxShadow = {};
    }
  }

  // Selectors.
  const iconPlacement = 'left' === attrs?.button?.decoration?.button?.desktop?.value?.icon?.placement ? 'before' : 'after';

  // TODO: feat(D5, refactor):  Probably no longer necessary.
  // Button Selector Function.
  // The `getSelector` method will add the `et_vb_hover` class to the parent selector
  // with assumption there are only 2 level of selectors separated by space: ".parent
  // .child". Unlike other selectors with parent and child selectors combination, the
  // selector of the button is the `body #page-container .et_pb_section` as the parent
  // selector and module order class as the child selector. Those parent selectors are
  // needed to make sure the button styles are not overriden by other style in the page.
  // In that case, the `getSelector` method will add the `et_vb_hover` class to the
  // `body`, not the module order class, and causes some hover styles are not working.
  // Due to that reason we need to set custom hover selector for button via `selectors`
  // property. However, not all elements can use fixed custom hover selector. The button
  // icon need to use selector function because the selector is dynamically generated by
  // ButtonStyle component.
  const getIconHoverSelector = (selector: string): string => {
    if (! selector.includes('body.et_vb_hover')) {
      return selector;
    }

    selector = selector.replace(/\.et_vb_hover/g, '');

    if (selector.includes(':before')) {
      selector = selector.replace(/:before/g, '.et_vb_hover:before');
    } else if (selector.includes(':after')) {
      selector = selector.replace(/:after/g, '.et_vb_hover:after');
    }

    return selector;
  };

  // TODO: feat(D5, refactor): Probably no longer necessary.
  const iconSelectorFunction      = <TParams extends SelectorFunctionParams<TParams['attr']>>(params: TParams): string => getIconHoverSelector(buttonIconSelectorFunction(params));
  const iconStyleSelectorFunction = <TParams extends SelectorFunctionParams<TParams['attr']>>(params: TParams): string => getIconHoverSelector(params?.selector);

  return (
    <StyleContainer mode={mode} state={state} noStyleTag={noStyleTag}>
      {/* Module */}
      {elements.style({
        attrName:   'module',
        styleProps: {
          attrs:   moduleElementAttrs,
          spacing: {
            // Custom `propertySelectors` is needed here to set custom hover selectors
            // for margin and padding only on the builder. Button margin is set to the
            // module wrapper, not the button itself. The `et_vb_wrapper_hover` class
            // is added to the module wrapper when hover state active. The `getSelector`
            // will only add `et_vb_hover` class to the selector. Due to that reason we
            // need to set custom hover selector for margin to render the styles when
            // module wrapper has `et_vb_wrapper_hover` class. Meanwhile, button padding
            // is set to the button itself, but the `getSelector` method will add the
            // `et_vb_hover` class to the parent selector which is the module wrapper.
            // Due to that reason we need to set custom hover selector for padding to
            // render the styles when the button itself has `et_vb_hover` class.
            propertySelectors: {
              desktop: {
                value: {
                  margin:  `${wrapperOrderClass}`,
                  padding: [
                    `${wrapperOrderClass} ${baseOrderClass}`,
                    `${wrapperOrderClass} ${baseOrderClass}:hover`,
                  ].join(', '),
                },
                hover: {
                  margin:  `${wrapperOrderClass}.et_vb_wrapper_hover`,
                  padding: [
                    `${wrapperOrderClass} ${baseOrderClass}.et_vb_hover`,
                    `${wrapperOrderClass} ${baseOrderClass}.et_vb_hover:hover`,
                  ].join(', '),
                },
              },
            },
            important: true,
          },
          transform: {
            // Custom `selectors` is needed here to set custom hover selectors for
            // transform only on the builder. The `getSelector` method will add the
            // `et_vb_hover` class to the parent selector which is the module wrapper.
            // Due to that reason we need to set custom hover selector for transform to
            // render the styles when the button itself has `et_vb_hover` class.
            selectors: {
              desktop: {
                value: `${wrapperOrderClass} a`,
                hover: `${wrapperOrderClass} a.et_vb_hover`,
              },
            },
          },
          disabledOn: {
            disabledModuleVisibility: settings?.disabledModuleVisibility,
          },
          advancedStyles: [
            {
              componentName: 'divi/text',
              props:         {
                attr: attrs?.module?.advanced?.text,
              },
            },
            {
              componentName: 'divi/common',
              props:         {
                selector:            wrapperOrderClass,
                attr:                attrs?.module?.advanced?.alignment,
                declarationFunction: buttonAlignmentDeclaration,
              },
            },
          ],
        },
      })}
      {/* Button */}
      {elements.style({
        attrName:   'button',
        styleProps: {
          attrs:          buttonElementAttrs,
          advancedStyles: [
            {
              componentName: 'divi/common',
              props:         {
                selector: isCustomPostType
                  ? [
                    `body.et-db #page-container #et-boc .et-l .et_pb_section ${baseOrderClass}:${iconPlacement}`,
                    `body.et-db #page-container #et-boc .et-l .et_pb_section ${baseOrderClass}:hover:${iconPlacement}`,
                  ].join(', ')
                  : [
                    `body #page-container .et_pb_section ${baseOrderClass}:${iconPlacement}`,
                    `body #page-container .et_pb_section ${baseOrderClass}:hover:${iconPlacement}`,
                  ].join(', '),
                attr:                attrs?.button?.decoration?.button,
                declarationFunction: buttonIconStyleDeclaration,
                selectorFunction:    iconStyleSelectorFunction,
              },
            },
            {
              componentName: 'divi/common',
              props:         {
                selector: isCustomPostType
                  ? `body.et-db #page-container #et-boc .et-l ${orderClass}`
                  : `body #page-container ${orderClass}`,
                attr:                attrs?.button?.decoration?.button,
                declarationFunction: buttonSpacingDeclaration,
              },
            },
          ],
          button: {
            // We need to evaluate the introduction of `selectorFunctions` property here.
            // @see https://github.com/elegantthemes/Divi/issues/33635.
            selectorFunctions: {
              buttonIconSelectorFunction: iconSelectorFunction,
            },
            affectingAttrs: {
              spacing: attrs?.module?.decoration?.spacing,
            },
          },
          spacing: {
            important: true,
          },
        },
      })}
      {/* Module
        * This is only to output the CSS form Custom CSS from Advanced Tab
        * at the very end of the DOM, so that it can override the css from
        * design tab. This is to fix the issue for re-ordering css
        * https://github.com/elegantthemes/Divi/issues/38331
        *
        * This may not be the ideal solution as per the conversation here
        * https://elegantthemes.slack.com/archives/C01CW343ZJ9/p1724934785470029?
        * thread_ts=1708688820.993489&cid=C01CW343ZJ9
        * so might need to re-visit this sometime later.
      */}
      <CssStyle
        selector={orderClass}
        attr={attrs.css}
      />
    </StyleContainer>
  );
};

export {
  ModuleStyles,
};
